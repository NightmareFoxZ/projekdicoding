# -*- coding: utf-8 -*-
"""AnalisisPenjualaanSepeda.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1O5U9_ip8EMcoFiiu1g0HxnuG_tIaO3Rd

# Proyek Analisis Data


*   Nama: ABHAR ARZAQI MUHAMMAD
*   Email: abhararzaqimuhammad@gmail.com
*   Dataset : Bike Sharing Dataset

## Menentukan Pertanyaan Bisnis

*   Bagaimana perbandingan jumlah penyewaan sepeda antara hari libur, akhir pekan dan hari libur?
*   Cuaca apa saja yang paling diminati oleh pengguna untuk bersepeda?
*   Apakah hubungan antara cuaca dan hari tertentu akan berpengaruh pada jumlah penyewaan sepeda? Bagaimana hubungannya?

## Import Semua Packages/Library yang Digunakan
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

"""## Data Wrangling"""

data_hari = pd.read_csv('/content/drive/MyDrive/dicodin/day.csv')
data_hari

data_jam = pd.read_csv('/content/drive/MyDrive/dicodin/hour.csv')
data_jam

# Uabh data float menjadi integer
if 'cnt' in data_hari.columns and pd.api.types.is_numeric_dtype(data_hari['cnt']):
    data_hari['cnt'] = data_hari['cnt'].astype(int)
else:
    print("Warning: 'cnt' column not found or not numeric in data_hari.")

if 'cnt' in data_jam.columns and pd.api.types.is_numeric_dtype(data_jam['cnt']):
    data_jam['cnt'] = data_jam['cnt'].astype(int)
else:
    print("Warning: 'cnt' column not found or not numeric in data_jam.")

# Mssing value
missing_values_hari = data_hari.isnull().sum()
print("Missing values in data_hari:\n", missing_values_hari)

missing_values_jam = data_jam.isnull().sum()
print("\nMissing values in data_jam:\n", missing_values_jam)

"""Mengecek missing value serta mengubah tipe data dari float menjadi integer

## Exploratory Data Analysis (EDA)
"""

# Sort the DataFrame by 'cnt' in descending order and get the top 5
top_5_jam = data_jam.groupby(['dteday', 'hr'])['cnt'].sum()
top_5_jam_ranked = top_5_jam.sort_values(ascending=False).head(10)
top_5_jam_ranked

"""Insight yang dapat diperoleh dari 10 data teratas adalah penyewaan sepeda paling laku adalah pada jam 17-18 atau jam 5 hingga 6 sore"""

# Sort the DataFrame by 'cnt' in descending order and get the top 10
top_5_jam = data_jam.groupby(['dteday', 'hr'])['cnt'].sum()
top_5_jam_ranked = top_5_jam.sort_values(ascending=False).tail(10)
top_5_jam_ranked

"""Insight yang dapat diperoleh dari 10 data terbawah diatas adalah pada pagi hari, jam 2 hingga jam 6 pagi adalah jam-jam dimana orang jarang menyewa sepeda"""

# Sort the DataFrame by 'cnt' in ascending order and get the top 5
top_5_hari = data_hari.groupby(['dteday'])['cnt'].sum()
top_5_hari_ranked = top_5_hari.sort_values(ascending=False).head(5)
top_5_hari_ranked

# Sort the DataFrame by 'cnt' in ascending order and get the top 5
top_5_hari = data_hari.groupby(['dteday'])['cnt'].sum()
top_5_hari_ranked = top_5_hari.sort_values(ascending=False).tail(5)
top_5_hari_ranked

# Menganalisis jumlah penyewa pada tiap cuaca menggunakan kolom 'weathersit'
def categorize_weather(row):
    if row['weathersit'] == 1:
        return 'Cerah'
    elif row['weathersit'] == 2:
        return 'Mendung / Berkabut'
    elif row['weathersit'] == 3:
        return 'Gerimis / Hujan Salju'
    else:
        return 'Hujan Deras / Badai / Badai Salju'

data_jam['weather_category'] = data_jam.apply(categorize_weather, axis=1)

weather_cnt = data_jam.groupby(['weather_category'])['cnt'].sum()

weather_cnt_ranked = weather_cnt.sort_values(ascending=False)

weather_cnt_ranked

"""Berdasarkan cuaca, tingkat penyewaan sepeda paling sering ada pada cuaca cerah"""

# Menganalisis jumlah penyewa pada hari hari tertentu menggunakan kolom 'holiday dan workingday'
def categorize_day(row):
    if row['holiday'] == 0 and row['workingday'] == 1:
        return 'hari kerja'
    elif row['holiday'] == 1 and row['workingday'] == 0:
        return 'hari libur'
    else:
        return 'akhir pekan'

data_jam['day_category'] = data_jam.apply(categorize_day, axis=1)

holiday_workingday_cnt = data_jam.groupby(['day_category'])['cnt'].sum()

holiday_workingday_cnt_ranked = holiday_workingday_cnt.sort_values(ascending=False)

holiday_workingday_cnt_ranked

# Menggabungkan antara kolom cuaca dan hari
combined_cnt = data_jam.groupby(['day_category', 'weather_category'])['cnt'].sum().reset_index()

combined_cnt_ranked = combined_cnt.sort_values(by=['cnt'], ascending=False)

combined_cnt_ranked

combined_cnt_ranked = combined_cnt_ranked.reset_index()
combined_cnt_ranked = combined_cnt_ranked.rename(columns={'index': 'ranking'})

# Membuat kplom baru bernama new numnber agar bisa dirankingkan dengan leluasa
combined_cnt_ranked['new_number'] = range(1, len(combined_cnt_ranked) + 1)

# Mengubah nama new number menjadi ranking
combined_cnt_ranked = combined_cnt_ranked.drop('ranking', axis=1)
combined_cnt_ranked = combined_cnt_ranked.rename(columns={'new_number': 'ranking'})
combined_cnt_ranked = combined_cnt_ranked.set_index('ranking')

combined_cnt_ranked

"""## Visualization & Explanatory Analysis"""

import matplotlib.pyplot as plt
import seaborn as sns

plt.figure(figsize=(10, 6))
sns.barplot(x='weather_category', y='cnt', data=data_jam, estimator=sum, ci=None, palette="viridis") # estimator=sum and ci=None to show the actual sum
plt.title('Total Penyewaan Sepeda Berdasarkan Cuaca')
plt.xlabel('Kategori Cuaca')
plt.ylabel('Total Sewa')
plt.xticks(rotation=45, ha='right')

# Add value labels on top of each bar
for p in plt.gca().patches:
    plt.gca().annotate(f'{int(p.get_height())}', (p.get_x() + p.get_width() / 2., p.get_height()),
                   ha='center', va='center', fontsize=10, color='black', xytext=(0, 5),
                   textcoords='offset points')
plt.show()

plt.figure(figsize=(10, 6))
sns.barplot(x='day_category', y='cnt', data=data_jam, estimator=sum, ci=None, palette="magma") # estimator=sum and ci=None to show the actual sum
plt.title('Total Penyewaan Sepeda Berdasarkan Hari')
plt.xlabel('Kategori Hari')
plt.ylabel('Total Penyewaan')

# Add value labels on top of each bar
for p in plt.gca().patches:
    plt.gca().annotate(f'{int(p.get_height())}', (p.get_x() + p.get_width() / 2., p.get_height()),
                   ha='center', va='center', fontsize=10, color='black', xytext=(0, 5),
                   textcoords='offset points')

plt.show()

plt.figure(figsize=(12, 6))
sns.barplot(x='day_category', y='cnt', hue='weather_category', data=data_jam, estimator=sum, ci=None, palette="plasma") # estimator=sum and ci=None to show the actual sum
plt.title('Total Penyewaan Sepeda Berdasarkan Cuaca dan Hari')
plt.xlabel('Kategori Hari')
plt.ylabel('Total Penyewaan')
plt.xticks(rotation=45, ha='right')
plt.legend(title='Kategori Cuaca')

# Add value labels on top of each bar
for p in plt.gca().patches:
    plt.gca().annotate(f'{int(p.get_height())}', (p.get_x() + p.get_width() / 2., p.get_height()),
                   ha='center', va='center', fontsize=8, color='black', xytext=(0, 5),
                   textcoords='offset points')

plt.show()



"""## Kesimpulan

*   Berdasarkan hasil Eksplorasi dan analisis data diatas, disimpulkan bahwa penyewaan sepeda paling banyak terjadi pada hari kerja, dengan jumlah penyewaan sekitar 2 kali lipat lebih banyak dari hari libur dan akhir pekan
*   Sedikit Mengejutkan bahwa jumlah penyewaan pada hari libur yang bukan merupakan akhir pekan, amat sangat jauh lebih sedikit dibandingkan dengan akhir pekan, sekitar 11.5 kali lebih sedikit
*   Cuaca yang paling diminati untuk bersepeda yaitu ketika cuaca cerah, diikuti dengan mendung yang jumlah peminatnya hanya 1/3 dari cuaca cerah.
*   Ketika 2 kategori digabungkan, tentu akan menghasilkan kesimpulan yang lain. Yang mana tentu saja jumlah penyewaan sepeda ketika hari kerja pada cuaca yang cerah akan menghasilkan angka yang paling tinggi. Namun, hal yang sedikit mengejutkan adalah jumlah penyewaan sepeda pada hari libur dengan cuaca cerah sedikit lebih banyak daripada saat hari kerja pada cuaca mendung/berkabut








"""